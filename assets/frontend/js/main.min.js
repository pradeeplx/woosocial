!function(o,a){var t={cache:function(){t.els={},t.vars={},t.vars.is_hidden_class="jck-woosocial--is-hidden",t.vars.animate_spin_class="jck-woosocial-spin",t.vars.add_to_cart_buttons_class=".jck-woosocial-add-to-cart-wrapper .add_to_cart_button",t.vars.card_grid_cards_class=".jck-woosocial-card-grid .jck-woosocial-card",t.vars.card_hover_class="jck-woosocial-card--hover",t.els.document_body=o(a.body),t.els.actions_list=o(".jck-woosocial-actions"),t.els.tab_links=o(".jck-woosocial-profile-link"),t.els.tab_content=o(".jck-woosocial-tab-content"),t.els.load_more_button=o(".jck-woosocial-load-more"),t.els.action_blocks=o(".jck-woosocial-action"),t.els.likes_container=o(".jck-woosocial-user-likes"),t.els.add_to_cart_buttons=o(".jck-woosocial-add-to-cart-wrapper .add_to_cart_button"),t.els.tick_icon=o('<i class="jck-woosocial-ic-tick"></i>'),t.els.loading_icon=o('<i class="jck-woosocial-ic-loading jck-woosocial-spin"></i>'),t.els.card_grids=o(".jck-woosocial-card-grid"),t.els.breakpoint_elements=o("[data-breakpoints]")},on_ready:function(){t.cache(),t.setup_follow_actions(),t.setup_like_action(),t.setup_tabs(),t.setup_load_more(),t.add_to_cart(),t.setup_breakpoints(),t.setup_cards()},on_scroll:function(){},on_resize:function(){t.setup_breakpoints()},setup_follow_actions:function(){o(".jck-woosocial-follow-action").on("click",function(){var a=o(this),s=a.attr("data-user-id"),i=a.attr("data-type"),c="jck-woosocial-follow-action--loading";"login"===i||a.hasClass(c)||(a.addClass(c),o.ajax({type:"GET",url:jck_woosocial_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woosocial_follow_action",nonce:jck_woosocial_vars.nonce,user_id:s,type:i},success:function(s){a.text(s.button.text),a.attr("data-type",s.button.type),a.removeClass(c),a.removeClass("jck-woosocial-follow-action--"+i),a.addClass("jck-woosocial-follow-action--"+s.button.type),s.add_follow_html&&t.els.actions_list.prepend(s.add_follow_html),s.remove_follow_class&&o(s.remove_follow_class).remove()},error:function(o){}}))})},setup_like_action:function(){o(a).on("click",".jck-woosocial-like-action",function(){var a=o(this),t=a.closest(".jck-woosocial-likes"),s=a.attr("data-product-id"),i=a.attr("data-type"),c=a.find(".jck-woosocial-like-button__count"),e="jck-woosocial-follow-action--loading";return a.hasClass(e)||(a.addClass(e),o.ajax({type:"GET",url:jck_woosocial_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woosocial_like_action",nonce:jck_woosocial_vars.nonce,product_id:s,type:i},success:function(o){if(c.length>0){var s=parseInt(c.text()),n="like"===i?s+1:s-1;c.text(n),a.attr("data-type",o.button.type),a.removeClass(e),a.removeClass("jck-woosocial-like-action--"+i),a.addClass("jck-woosocial-like-action--"+o.button.type),o.add_like_html&&t.find(".jck-woosocial-likes__item--like-button").after(o.add_like_html),o.remove_like_class&&t.find(o.remove_like_class).remove()}},error:function(o){}})),!1})},setup_tabs:function(){t.els.tab_links.on("click",function(){var a=o(this).attr("href"),s="jck-woosocial-profile-link--active";return t.els.tab_links.removeClass(s),o(this).addClass(s),t.els.tab_content.hide(),o(a).show(),t.setup_breakpoints(),!1})},spin_icon_start:function(o){o.addClass(t.vars.animate_spin_class)},spin_icon_stop:function(o){o.removeClass(t.vars.animate_spin_class)},disable_load_more_button:function(o){o.html(jck_woosocial_vars.strings.no_more).removeAttr("href").addClass("jck-woosocial-load-more--disabled")},setup_load_more:function(){t.els.load_more_button.on("click",function(){var a=o(this),s=a.find("i");return a.hasClass("jck-woosocial-load-more--disabled")?!1:(t.spin_icon_start(s),o(this).hasClass("jck-woosocial-load-more--activity")&&t.load_more_activity(o(this),function(){t.spin_icon_stop(s)}),void(o(this).hasClass("jck-woosocial-load-more--likes")&&t.load_more_likes(o(this),function(){t.spin_icon_stop(s)})))})},load_more_activity:function(a,s){var i=parseInt(a.attr("data-limit")),c=parseInt(a.attr("data-offset")),e=i+c,n=a.attr("data-user-id"),l=a.attr("data-profile-user-id"),r=a.closest("li");o.ajax({type:"GET",url:jck_woosocial_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woosocial_load_more_activity",nonce:jck_woosocial_vars.nonce,limit:i,offset:c,user_id:n,profile_user_id:l},success:function(o){o.activity_html?(r.before(o.activity_html),a.attr("data-offset",e)):t.disable_load_more_button(a),void 0!==s&&s(o)},error:function(o){}})},load_more_likes:function(a,s){var i=parseInt(a.attr("data-limit")),c=parseInt(a.attr("data-offset")),e=i+c,n=a.attr("data-user-id");o.ajax({type:"GET",url:jck_woosocial_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woosocial_load_more_likes",nonce:jck_woosocial_vars.nonce,limit:i,offset:c,user_id:n},success:function(o){o.likes_html?(t.els.likes_container.append(o.likes_html),a.attr("data-offset",e)):t.disable_load_more_button(a),void 0!==s&&s(o)},error:function(o){}})},add_to_cart:function(){t.els.document_body.on("click",t.vars.add_to_cart_buttons_class,function(){var a=o(this),s=a.text();a.attr("data-button-text",s).append(t.els.loading_icon)}),t.els.document_body.on("added_to_cart",function(o,a,s,i){var c=i.closest(".jck-woosocial-add-to-cart-wrapper"),e=i.attr("data-button-text");c.length>0&&(i.html(e).append(t.els.tick_icon),setTimeout(function(){i.html(e)},2e3))})},setup_breakpoints:function(){t.els.breakpoint_elements.length>0&&t.els.breakpoint_elements.each(function(a,t){var s=o(t),i=s.innerWidth(),c=s.attr("data-breakpoints"),e=o.parseJSON(c),n=!1;s.is(":visible")&&(o.each(e,function(o,a){i<=a.max_width&&(n?a.max_width<=n&&(n=a.max_width):n=a.max_width)}),o.each(e,function(o,a){a.max_width===n?s.addClass(a["class"]):s.removeClass(a["class"])}))})},setup_cards:function(){t.els.document_body.hoverIntent(function(){var a=o(this);a.addClass(t.vars.card_hover_class)},function(){var a=o(this);a.removeClass(t.vars.card_hover_class)},t.vars.card_grid_cards_class)}};o(a).ready(t.on_ready()),o(window).on("scroll",function(){t.on_scroll()}),o(window).on("resize",function(){t.on_resize()})}(jQuery,document);
//# sourceMappingURL=data:application/json;base64,