!function(o,a){var c={cache:function(){c.els={},c.vars={},c.els.$actions_list=o(".jck_woo_social-actions")},on_ready:function(){c.cache(),c.setup_follow_actions(),c.setup_like_action()},setup_follow_actions:function(){o(".jck_woo_social-follow-action").on("click",function(){var a=o(this),l=a.attr("data-user-id"),t=a.attr("data-follow-type"),s="jck_woo_social-follow-action--loading";"login"===t||a.hasClass(s)||(a.addClass(s),o.ajax({type:"GET",url:jck_woo_social_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woo_social_follow_action",nonce:jck_woo_social_vars.nonce,user_id:l,type:t},success:function(l){console.log("success"),console.log(l),a.text(l.button.text),a.attr("data-follow-type",l.button.type),a.removeClass(s),a.removeClass("jck_woo_social-follow-action--"+t),a.addClass("jck_woo_social-follow-action--"+l.button.type),l.add_follow_html&&c.els.$actions_list.prepend(l.add_action_html),l.remove_follow_class&&o(l.remove_follow_class).remove()},error:function(o){console.log("error"),console.log(o)}}))})},setup_like_action:function(){o(a).on("click",".jck-woo-social-like-action",function(){var a=o(this),c=a.closest(".jck-woo-social-likes"),l=a.attr("data-product-id"),t=a.attr("data-type"),s=a.find(".jck-woo-social-like-button__count"),e="jck_woo_social-follow-action--loading";return a.hasClass(e)||(a.addClass(e),o.ajax({type:"GET",url:jck_woo_social_vars.ajax_url,cache:!1,dataType:"jsonp",crossDomain:!0,data:{action:"jck_woo_social_like_action",nonce:jck_woo_social_vars.nonce,product_id:l,type:t},success:function(o){if(console.log("success"),console.log(o),s.length>0){var l=parseInt(s.text()),n="like"===t?l+1:l-1;s.text(n),a.attr("data-type",o.button.type),a.removeClass(e),a.removeClass("jck_woo_social-like-action--"+t),a.addClass("jck_woo_social-like-action--"+o.button.type),o.add_like_html&&c.find(".jck-woo-social-likes__item--like-button").after(o.add_like_html),o.remove_like_class&&c.find(o.remove_like_class).remove()}},error:function(o){console.log("error"),console.log(o)}})),!1})}};o(a).ready(c.on_ready())}(jQuery,document);
//# sourceMappingURL=data:application/json;base64,